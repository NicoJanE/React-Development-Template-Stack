# Generic variables
# #########################################################
HOST=0.0.0.0

# Internal port AND external port! UPDATE\CHECK THIS BEFORE RUNNING THE COMPOSE FILE
PORT=3098

# REMARK 1
# We have to use it like this! 
# NO way that you can use the following in your compose file (while the features exist, clueless why, but super frustrating experience!):
#
# THIS DOES NOT WORK in COMPOSE FILE:
#
#     env_file:                               # THIS horrible feature, does not work with sub directories or/and alternative names
#      - ./cra.env                            # Forget about it, it just DONT work!
#
#	For this reason all variables are mixed-up in one .env file (said but true) 
#


# CRA Project variables
# #########################################################
#
PRJ_NAME_ARG=myproject2
PRJ_BASE_ARG=/projects/cra2
#
# Choose one type of project to create
#PRJ_TYPE_ARG=cra-template
#PRJ_TYPE_ARG=PRJ_TYPE_ARG=cra-template-typescript
#PRJ_TYPE_ARG=cra-template-redux
#PRJ_TYPE_ARG=cra-template-redux-typescript
#PRJ_TYPE_ARG=cra-template-pwa
#PRJ_TYPE_ARG=cra-template-tailwindcss
PRJ_TYPE_ARG=cra-template-material-ui
#PRJ_TYPE_ARG=cra-template-ant-design


# Next.js Project variables
# All compose files named: 'compose_nextjs_*' and related docker files named: 'Dockerfile_NEXTJS_*'
# Use these variables.
# #########################################################
#
PRJ_NAME_ARG_NEXT=ddproject
PRJ_BASE_ARG_NEXT=/projects/nextjs2


# Restore Project variables
# #########################################################
#
#   -   Set these variable this is where the restored project is copied to in the container:
#       ${PRJ_BASE_ARG_REST}{PRJ_TARGET_ARG_REST}  in this example -> /projects/nextjs/restore-prj
PRJ_BASE_ARG_REST=/projects/nextjs
PRJ_TARGET_ARG_REST=/nje7restore-prj
